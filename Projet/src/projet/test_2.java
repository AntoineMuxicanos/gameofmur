/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projet;

import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author Martin
 */
public class test_2 extends javax.swing.JFrame implements ActionListener {

    private BufferedImage background;
    private BufferedImage background_2;
    private static int TILE_WIDTH = 32;
    private static int TILE_HEIGHT = 32;
    private static int TILES_PER_ROW = 16;
    private static int TILES_PER_COL = 16;
    private Graphics2D contexte;
    private BufferedImage tileperso;
    private Joueur toto;
    private ArrayList<Fleche> item;
    private ArrayList<Marcheurs_blancs> zombies;
    private Mur mur;


    /**
     * Creates new form test_2
     */
    public test_2() {
        initComponents();
        try {
            this.background = ImageIO.read(new File("fond_5.png"));
            this.background_2 = ImageIO.read(new File("fond_5.png"));
            this.contexte = this.background.createGraphics();
            toto = new Joueur();
            this.mur = new Mur();
            this.contexte.drawImage(toto.getSkin(), toto.getX(), toto.getY(), null);
            this.item = new ArrayList<Fleche>();
            this.zombies = new ArrayList<Marcheurs_blancs>();
            Timer timer = new Timer(100, (ActionListener) this);
            timer.start();
            Ressources.init();

        } catch (IOException ex) {
            Logger.getLogger(test_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        afficheur();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(1333, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addContainerGap(900, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(128, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        //System.out.println(evt);
        gestion_clavierPressed(evt);

    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        // TODO add your handling code here:
        gestion_clavierRealesed(evt);
    }//GEN-LAST:event_formKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(test_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(test_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(test_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(test_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new test_2().setVisible(true);
            }
        });
    }

    public void afficheur() {
        jLabel1.setIcon(new ImageIcon(this.background));
    }

    public void imageDrawer() {
        this.contexte.drawImage(this.background_2, 0, 0, null);
        
        for (Marcheurs_blancs marcheurs_blancs : zombies) {
            this.contexte.drawImage(marcheurs_blancs.getSkin(), marcheurs_blancs.getX(), marcheurs_blancs.getY(), null);
            }
        
        for (Fleche fleche : item) {
            this.contexte.drawImage(fleche.getSkin(), fleche.getX(), fleche.getY(), null);
        }
        this.contexte.drawImage(toto.getSkin(), toto.getX(), toto.getY(), null);
        
        afficheur();
    }

    public void gestion_fleche() {
        ArrayList<Integer> ind = new ArrayList();
        
        for (Fleche fleche : item) {
            fleche.setX(fleche.getX() + 10);
            fleche.collision(zombies);
            if (fleche.getX() > 1070||fleche.isDestroy()) {
                ind.add(item.indexOf(fleche));
            }
        }
        for (int i : ind) {
            try{
                item.remove(i);}catch(java.lang.IndexOutOfBoundsException error){}
            finally{}
        }
        if (toto.up) {
            //this.toto.setY(this.toto.getY() - 10);
            if (toto.getY()<13){
            }
            else{
               toto.setY(toto.getY()-8);
            }
        } else if (toto.down) {
            //this.toto.setY(this.toto.getY() + 10);
            if (toto.getY()>780){
            }
            else{
               toto.setY(toto.getY()+8);
            }
        }
    }

    
    public void gestion_marcheurs_blancs(){
        if (!this.zombies.isEmpty()) {
                if (System.currentTimeMillis() > this.zombies.get(this.zombies.size() - 1).getAnniversaire() + 800) { //pouvoir faire varier la vitesse de creation des zombies
                    this.zombies.add(new Marcheurs_blancs());
                }
            } else {
                this.zombies.add(new Marcheurs_blancs());
            }
        ArrayList<Integer> ind = new ArrayList();
        for (Marcheurs_blancs marcheurs_blancs : zombies) {
            if(marcheurs_blancs.getLife()<1){
                ind.add(zombies.indexOf(marcheurs_blancs));
                marcheurs_blancs.last_hit.kill+=1;
                if(marcheurs_blancs.isOn_the_wall()){
                    this.mur.setMB_compteur(this.mur.getMB_compteur()-1);
                }
            }
            if (marcheurs_blancs.getX() < 200 && !marcheurs_blancs.isOn_the_wall()) {
                marcheurs_blancs.setOn_the_wall(true);
                this.mur.setMB_compteur(this.mur.getMB_compteur()+1);
                //ind.add(zombies.indexOf(marcheurs_blancs));  //destrution auto zombies
            }if(marcheurs_blancs.getX() < 200 && marcheurs_blancs.isOn_the_wall()){
                //do nothing
            }else{
                 marcheurs_blancs.setX(marcheurs_blancs.getX() - 5);
            }
            
        }
        for (int i : ind) {
            zombies.remove(i);
        }
    }
    
    public void gestion_mur(){
        if (this.mur.getLife()<401&&this.mur.getLife()>398){
            this.background_2=Ressources.fond_4;
            System.out.println("4VIE");
        }       
        if (this.mur.getLife()<301&&this.mur.getLife()>298 ){
            this.background_2=Ressources.fond_3;
            System.out.println("3VIE");
        }
        if (this.mur.getLife()<201&&this.mur.getLife()>198){
            this.background_2=Ressources.fond_2;
            System.out.println("2VIE");
        }
        if (this.mur.getLife()<101&&this.mur.getLife()>98){
            this.background_2=Ressources.fond_1;
            System.out.println("1VIE");
        }
        if (this.mur.getLife()==0){
            this.background_2=Ressources.fond_GO;
        }
        this.mur.life_mur();
        //this.jLabel1.setText(Double.toString(this.mur.getLife())); //afficher vie mur
        //System.out.println(Double.toString(this.mur.getLife()));
        this.jLabel1.setText(Integer.toString(this.toto.kill));
    }
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        if (this.mur.getLife()>0){
            gestion_mur();
            gestion_marcheurs_blancs();
            gestion_fleche();
            imageDrawer();
        }else{
            try {
                this.background_2 = ImageIO.read(new File("fond_game_over.png"));
                imageDrawer();
            } catch (IOException ex) {
                Logger.getLogger(test_2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /*
    public void gestion_clavier(java.awt.event.KeyEvent evt){
        if (evt.getKeyCode()==38){
            //System.out.println("up");
            if (toto.getY()<13){
            }
            else{
               toto.setY(toto.getY()-16);
            }
            imageDrawer();
            //System.out.println(toto.getY());
        }
        if (evt.getKeyCode()==40){
            //System.out.println("down");
            if (toto.getY()>780){
            }
            else{
               toto.setY(toto.getY()+16);
            }
            imageDrawer();
            //System.out.println(toto.getY());
        }
        if (evt.getKeyCode()==32){
            this.item.add(new Fleche (toto));
            imageDrawer();
        }
        
    }*/
    public void gestion_clavierRealesed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == 38) {
            //System.out.println("up");
            toto.up = false;
        }
        if (evt.getKeyCode() == 40) {
            //System.out.println("down");
            toto.down = false;
        }

    }

    public void gestion_clavierPressed(java.awt.event.KeyEvent evt) {
        if (evt.getKeyCode() == 38) {
            //System.out.println("up");
            toto.up = true;
        }
        if (evt.getKeyCode() == 40) {
            //System.out.println("down");
            toto.down = true; 
        }    
        if (evt.getKeyCode() == 32) {
            if    (!this.item.isEmpty()) {
                if (System.currentTimeMillis() > this.item.get(this.item.size() - 1).getAnniversaire() + 400 ) { //pouvoir faire varier la vitesse de creation des fleches
                    this.item.add(new Fleche(toto));
                }
            } else {
                this.item.add(new Fleche(toto));
            }

        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
